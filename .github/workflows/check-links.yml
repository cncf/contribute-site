# This workflow checks for broken links in the built site using htmltest
#
# Features:
# - Runs weekly every Monday at 9:00 UTC
# - Can be manually triggered
# - Uses htmltest (same as @cncf/techdocs) for link checking
# - Creates/updates GitHub issues when broken links are found
# - Automatically closes issues when all links are fixed
# - Uploads detailed results as artifacts for review
#
# Configuration:
# - Uses .htmltest.yml for skip patterns and other settings
# - Uses Makefile (aligned with @cncf/techdocs) for build orchestration
# - Skips social media links to avoid rate limiting
# - Maintains a reference cache to speed up checks

name: Check Links on Live Site

on:
  schedule:
    # Run every Monday at 9:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  check-links:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Check links with htmltest
        id: htmltest
        continue-on-error: true
        run: |
          echo "Running link check with htmltest..."
          make check-links 2>&1 | tee htmltest-output.txt
          exit ${PIPESTATUS[0]}

      - name: Process and analyze results
        id: analyze
        if: always()
        run: |
          cat > analyze-htmltest.js << 'EOFJS'
          const fs = require('fs');
          const path = require('path');

          try {
            // Read htmltest output
            const output = fs.readFileSync('htmltest-output.txt', 'utf8');
            
            // Parse for errors - htmltest outputs errors in a specific format
            const lines = output.split('\n');
            const errors = [];
            let errorCount = 0;
            
            for (const line of lines) {
              if (line.includes('✘') || line.includes('Error')) {
                errors.push(line.trim());
                errorCount++;
              }
            }
            
            console.log('## Link Check Results\n');
            console.log('**Site checked:** Built site (build/)');
            console.log('**Tool:** htmltest (same as @cncf/techdocs)');
            console.log('**Broken links found:** ' + errorCount + '\n');
            
            if (errorCount > 0) {
              console.log('### Broken Links\n');
              console.log('```');
              errors.slice(0, 50).forEach(error => console.log(error));
              if (errors.length > 50) {
                console.log('... and ' + (errors.length - 50) + ' more errors');
              }
              console.log('```\n');
              
              console.log('### How to Fix\n');
              console.log('1. Review the errors above');
              console.log('2. Update the broken links in the source files');
              console.log('3. Test locally with `npm run check:links`');
              console.log('4. Common fixes:');
              console.log('   - Email links: Use `mailto:` prefix');
              console.log('   - Internal links: Check file paths and anchors');
              console.log('   - External links: Verify URLs are correct\n');
              
              process.exit(1);
            } else {
              console.log('✅ **No broken links found!**\n');
            }
          } catch (error) {
            console.error('Error analyzing results:', error.message);
            // Don't fail if we can't analyze - the htmltest step result is what matters
          }
          EOFJS

          node analyze-htmltest.js > link-analysis.md || true
          cat link-analysis.md

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: link-check-results
          path: |
            htmltest-output.txt
            link-analysis.md
            tmp/.htmltest/
          retention-days: 30

      - name: Create or update issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let analysis = 'Link check failed. See workflow run for details.';

            try {
              analysis = fs.readFileSync('link-analysis.md', 'utf8');
            } catch (error) {
              console.log('Could not read analysis file:', error.message);
            }

            const dateStr = new Date().toISOString().split('T')[0];
            const title = 'Broken links detected on site (' + dateStr + ')';
            const runUrl = 'https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId;

            const body = '# Broken Links Detected\n\n' +
              'This issue was automatically created because the weekly link check found broken links.\n\n' +
              analysis + '\n\n' +
              '## Actions Required\n\n' +
              '1. Review the broken links listed above\n' +
              '2. Update or remove the broken links in the source files\n' +
              '3. Test locally with `npm run check:links`\n' +
              '4. Close this issue once all broken links are addressed\n\n' +
              '## Workflow Run\n\n' +
              'See the [workflow run](' + runUrl + ') for detailed logs and downloadable results.\n\n' +
              '---\n' +
              '*This issue was automatically created by the [Check Links workflow](.github/workflows/check-links.yml)*';

            // Check if a similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'broken-links'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Broken links detected on site')
            );

            if (existingIssue) {
              // Update existing issue with new comment
              const commentBody = '## Updated Link Check Results (' + dateStr + ')\n\n' +
                analysis + '\n\n' +
                'See the [latest workflow run](' + runUrl + ') for details.';

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: commentBody
              });

              console.log('Updated existing issue #' + existingIssue.number);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['broken-links', 'maintenance']
              });

              console.log('Created new issue #' + issue.data.number);
            }

      - name: Close issue on success
        if: success() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            // Close any open broken-links issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'broken-links'
            });

            const runUrl = 'https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId;

            for (const issue of issues.data) {
              if (issue.title.includes('Broken links detected on site')) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '✅ All broken links have been fixed! No broken links detected in the [latest check](' + runUrl + ').'
                });

                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });

                console.log('Closed issue #' + issue.number);
              }
            }
